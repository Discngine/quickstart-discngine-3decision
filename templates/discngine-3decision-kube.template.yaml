---
AWSTemplateFormatVersion: 2010-09-09
Description: "This template deploys the 3decision helm chart, as well as related helm and kubernetes resources. (qs-1snm79fel)."
Metadata:
  cfn-lint: { config: { ignore_checks: [ E3001 ] } }
  LintSpellExclude:
    - Discngine
    - 3decision
Parameters:
  VPCID:
    Type: String
  OIDCIssuerURLWithoutProtocol:
    Type: String
  TNamespace:
    Default: tdecision
    Type: String
  JWTPrivateKey:
    Type: String
    NoEcho: true
  JWTPublicKey:
    Type: String
  EKSClusterName:
    Type: String
  DBConnectionString:
    Type: String
  DataPubVolumeID:
    Type: String
  DomainName:
    Type: String
  CertificateArn:
    Type: String
  HostString:
    Type: String
  DBName:
    Type: String
  LoadBalancerType:
    Type: String
  AzureClientId:
    Type: String
  AzureTenant: 
    Type: String
  AzureSecret: 
    Type: String
  AzureRedirectUri:
    Type: String
  OktaClientId:
    Type: String
  OktaSecret:
    Type: String
  OktaDomain:
    Type: String
  OktaServerId:
    Type: String
  OktaRedirectUri:
    Type: String
  MainSubdomain:
    Type: String
  ApiSubdomain:
    Type: String
  HelpSubdomain:
    Type: String
  LoadBalancerClass:
    Type: String
  EKSServiceCidr:
    Type: String
  SecretRoleArn:
    Type: String
  RedisRoleArn:
    Type: String
  RedisAccessPointAlias:
    Type: String

Conditions:
  AzureUnused: !Equals [!Ref AzureClientId, ""]
  OktaUnused: !Equals [!Ref OktaClientId, ""]
  NginxLB: !Equals [!Ref LoadBalancerClass, "nginx"]
  ServiceCidrSecondary: !Equals [!Ref EKSServiceCidr, "10.100.0.0/16"]

Resources:
  LoadBalancerControllerIAMRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn-lint:
        config:
          ignore_checks: [EIAMPolicyWildcardResource]
          ignore_reasons:
            EIAMPolicyWildcardResource: >-
              Action elasticloadbalancing:DescribeTags requires a wildcard
              resource. As of 2023-02-05, cfn-lint falsely reports this as an
              issue.
    Properties:
      AssumeRolePolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": "arn:${AWS::Partition}:iam::${AWS::AccountId}:oidc-provider/${OIDCIssuerURLWithoutProtocol}"
              },
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "${OIDCIssuerURLWithoutProtocol}:aud": [
                    "sts.amazonaws.com",
                    "sts.${AWS::Region}.amazonaws.com"
                  ],
                  "${OIDCIssuerURLWithoutProtocol}:sub": "system:serviceaccount:kube-system:aws-load-balancer-controller"
                }
              }
            }
          ]
        }
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly
      Policies:
        - PolicyName: load-balancer-controller-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: iam:CreateServiceLinkedRole
                Resource: '*'
                Condition:
                  StringEquals:
                    iam:AWSServiceName: elasticloadbalancing.amazonaws.com
              - Effect: Allow
                Action:
                  - ec2:DescribeAccountAttributes
                  - ec2:DescribeAddresses
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeCoipPools
                  - ec2:DescribeInstances
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeTags
                  - ec2:DescribeVpcPeeringConnections
                  - ec2:DescribeVpcs
                  - ec2:GetCoipPoolUsage
                  - elasticloadbalancing:DescribeListenerCertificates
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeRules
                  - elasticloadbalancing:DescribeSSLPolicies
                  - elasticloadbalancing:DescribeTags
                  - elasticloadbalancing:DescribeTargetGroupAttributes
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetHealth
                Resource: '*'
              - Effect: Allow
                Action: cognito-idp:DescribeUserPoolClient
                Resource: !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*
              - Effect: Allow
                Action: acm:ListCertificates
                Resource: '*'
              - Effect: Allow
                Action: acm:DescribeCertificate
                Resource: !Sub arn:${AWS::Partition}:acm:${AWS::Region}:${AWS::AccountId}:certificate/*
              - Effect: Allow
                Action: iam:ListServerCertificates
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:GetServerCertificate
                Resource: !Sub arn:${AWS::Partition}:acm:${AWS::Region}:${AWS::AccountId}:server-certificate/*
              - Effect: Allow
                Action:
                  - waf-regional:GetWebACL
                  - waf-regional:GetWebACLForResource
                  - waf-regional:AssociateWebACL
                  - waf-regional:DisassociateWebACL
                Resource:
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/app/*/*
                  - !Sub arn:${AWS::Partition}:waf-regional:${AWS::Region}:${AWS::AccountId}:webacl/*
              - Effect: Allow
                Action:
                  - wafv2:GetWebACL
                  - wafv2:GetWebACLForResource
                  - wafv2:AssociateWebACL
                  - wafv2:DisassociateWebACL
                Resource:
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/app/*/*
                  - !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*
                  - !Sub arn:${AWS::Partition}:wafv2:${AWS::Region}:${AWS::AccountId}:*/webacl/*/*
              - Effect: Allow
                Action:
                  - shield:CreateProtection
                  - shield:GetSubscriptionState
                Resource: '*'
              - Effect: Allow
                Action:
                  - shield:DeleteProtection
                  - shield:DescribeProtection
                Resource: !Sub arn:${AWS::Partition}:shield::${AWS::AccountId}:protection/*
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupIngress
                Resource:
                  - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*
                  - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:security-group-rule/*
              - Effect: Allow
                Action: ec2:CreateSecurityGroup
                Resource:
                  - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*
                  - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${VPCID}
              - Effect: Allow
                Action: ec2:CreateTags
                Resource: !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*
                Condition:
                  StringEquals:
                    ec2:CreateAction: CreateSecurityGroup
                  'Null':
                    aws:RequestTag/elbv2.k8s.aws/cluster: 'false'
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:DeleteTags
                Resource: !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*
                Condition:
                  'Null':
                    aws:RequestTag/elbv2.k8s.aws/cluster: 'true'
                    aws:ResourceTag/elbv2.k8s.aws/cluster: 'false'
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:DeleteSecurityGroup
                Resource: '*'
                Condition:
                  'Null':
                    aws:ResourceTag/elbv2.k8s.aws/cluster: 'false'
              - Effect: Allow
                Action:
                  - elasticloadbalancing:CreateLoadBalancer
                  - elasticloadbalancing:CreateTargetGroup
                Resource: '*'
                Condition:
                  'Null':
                    aws:RequestTag/elbv2.k8s.aws/cluster: 'false'
              - Effect: Allow
                Action:
                  - elasticloadbalancing:CreateListener
                  - elasticloadbalancing:DeleteListener
                  - elasticloadbalancing:CreateRule
                  - elasticloadbalancing:DeleteRule
                Resource:
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener-rule/app/*/*/*/*
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener-rule/net/*/*/*/*
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/app/*/*/*
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/net/*/*/*
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/app/*/*
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/net/*/*
              - Effect: Allow
                Action:
                  - elasticloadbalancing:AddTags
                  - elasticloadbalancing:RemoveTags
                Resource:
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/*/*
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/net/*/*
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/app/*/*
                Condition:
                  'Null':
                    aws:RequestTag/elbv2.k8s.aws/cluster: 'true'
                    aws:ResourceTag/elbv2.k8s.aws/cluster: 'false'
              - Effect: Allow
                Action:
                  - elasticloadbalancing:AddTags
                  - elasticloadbalancing:RemoveTags
                Resource:
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/net/*/*/*
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/app/*/*/*
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener-rule/net/*/*/*
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener-rule/app/*/*/*
              - Effect: Allow
                Action:
                  - elasticloadbalancing:ModifyLoadBalancerAttributes
                  - elasticloadbalancing:SetIpAddressType
                  - elasticloadbalancing:SetSecurityGroups
                  - elasticloadbalancing:SetSubnets
                  - elasticloadbalancing:DeleteLoadBalancer
                  - elasticloadbalancing:ModifyTargetGroup
                  - elasticloadbalancing:ModifyTargetGroupAttributes
                  - elasticloadbalancing:DeleteTargetGroup
                Resource: '*'
                Condition:
                  'Null':
                    aws:ResourceTag/elbv2.k8s.aws/cluster: 'false'
              - Effect: Allow
                Action:
                  - elasticloadbalancing:RegisterTargets
                  - elasticloadbalancing:DeregisterTargets
                Resource: !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/*/*
              - Effect: Allow
                Action:
                  - elasticloadbalancing:SetWebAcl
                Resource: '*'
              - Effect: Allow
                Action:
                  - elasticloadbalancing:AddListenerCertificates
                  - elasticloadbalancing:ModifyListener
                  - elasticloadbalancing:ModifyRule
                  - elasticloadbalancing:RemoveListenerCertificates
                Resource:
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/net/*/*/*
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/app/*/*/*
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener-rule/net/*/*/*
                  - !Sub arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener-rule/app/*/*/*

  LoadBalancerControllerHelmChart:
    Type: AWSQS::Kubernetes::Helm
    Properties:
      ClusterID: !Ref EKSClusterName
      Namespace: kube-system
      Name: aws-load-balancer-controller
      Repository: https://aws.github.io/eks-charts
      Chart: aws/aws-load-balancer-controller
      Values:
        clusterName: !Ref EKSClusterName
        hostNetwork: 'false'
        image.repository: public.ecr.aws/eks/aws-load-balancer-controller
        nodeSelector.kubernetes\.io/os: linux
        region: !Ref AWS::Region
        replicaCount: 1
        resources.limits.cpu: '100m'
        resources.limits.memory: '80Mi'
        serviceAccount.annotations.eks\.amazonaws\.com/role-arn: !GetAtt LoadBalancerControllerIAMRole.Arn
        serviceAccount.create: 'true'
        serviceAccount.name: aws-load-balancer-controller
        vpcId: !Ref VPCID

  EncryptedStorageClass:
    Type: "AWSQS::Kubernetes::Resource"
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: 'default'
      Manifest: |
        apiVersion: storage.k8s.io/v1
        kind: StorageClass
        metadata:
          name: gp2-encrypted
        parameters:
          fsType: ext4
          type: gp2
          encrypted: "true"
        provisioner: ebs.csi.aws.com
        reclaimPolicy: Delete
        volumeBindingMode: WaitForFirstConsumer
  TDecisionNamespace:
    Type: "AWSQS::Kubernetes::Resource"
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: 'kube-system'
      Manifest: !Sub |
        kind: Namespace
        apiVersion: v1
        metadata:
          name: ${TNamespace}
  RedisClusterNamespace:
    Type: "AWSQS::Kubernetes::Resource"
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: 'kube-system'
      Manifest: |
        kind: Namespace
        apiVersion: v1
        metadata:
          name: redis-cluster
  ChoralNamespace:
    Type: "AWSQS::Kubernetes::Resource"
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: 'kube-system'
      Manifest: |
        kind: Namespace
        apiVersion: v1
        metadata:
          name: choral
  CertManager:
    Type: "AWSQS::Kubernetes::Helm"
    Metadata: { cfn-lint: { config: { ignore_checks: [ E3012 ] } } }
    Properties:
      ClusterID: !Ref EKSClusterName
      Name: cert-manager
      Namespace: cert-manager
      Repository: https://charts.jetstack.io
      Chart: cert-manager
      Version: 1.8.0
      Values:
        installCRDs: true
  IngressNginx:
    Type: "AWSQS::Kubernetes::Helm"
    Condition: NginxLB
    Metadata: { cfn-lint: { config: { ignore_checks: [ E3012 ] } } }
    Properties:
      ClusterID: !Ref EKSClusterName
      Name: ingress-nginx
      Namespace: ingress-nginx
      Repository: https://kubernetes.github.io/ingress-nginx
      Chart: ingress-nginx
  RedisChart:
    Type: "AWSQS::Kubernetes::Helm"
    DependsOn: [SentinelBackupConfigmapSentinel, RedisClusterNamespace, EncryptedStorageClass]
    Metadata: { cfn-lint: { config: { ignore_checks: [ E3012, E9101 ] } } }
    Properties:
      ClusterID: !Ref EKSClusterName
      Name: sentinel
      Namespace: redis-cluster
      Chart: oci://fra.ocir.io/discngine1/3decision_kube/redis-sentinel:16.3.1
      ValueYaml: |
        global:
          storageClass: gp2-encrypted
        serviceAccount:
          create: false
          name: redis-s3-upload
        commonConfiguration: |-
          # Enable AOF https://redis.io/topics/persistence#append-only-file
          appendonly no
          # Disable RDB persistence, AOF persistence already enabled.
          save 300 1
        sentinel:
          enabled: true
          resources:
            requests:
              cpu: 500m
              memory: 500Mi
        master:
          service:
            ports:
              redis: 6380
        replica:
          resources:
            requests:
              cpu: 1000m
              memory: 2Gi
          extraVolumes:
          - name: secret-key
            secret:
              secretName: ssh-key-secret
              optional: true
          initContainers:
            - name: redis-pull-container
              envFrom:
              - configMapRef:
                  name: sentinel-backup-env-cm
                  optional: true
              image: fra.ocir.io/discngine1/3decision_kube/redis-backup:0.0.1
              command: ["./entrypoint.sh"]
              args: ["pull"]
              imagePullPolicy: Always
              volumeMounts:
              - mountPath: /root/.ssh/
                name: secret-key
                readOnly: true
              - mountPath: /data
                name: redis-data

  ExternalSecretsOperator:
    Type: "AWSQS::Kubernetes::Helm"
    Metadata: { cfn-lint: { config: { ignore_checks: [ E3012 ] } } }
    Properties:
      ClusterID: !Ref EKSClusterName
      Name: external-secrets
      Namespace: external-secrets
      Repository: https://charts.external-secrets.io
      Chart: external-secrets
  Reloader:
    Type: "AWSQS::Kubernetes::Helm"
    Metadata: { cfn-lint: { config: { ignore_checks: [ E3012 ] } } }
    Properties:
      ClusterID: !Ref EKSClusterName
      Name: reloader
      Namespace: reloader
      Repository: https://stakater.github.io/stakater-charts
      Chart: reloader
  JWTSecret:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: TDecisionNamespace
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: !Ref TNamespace
      Manifest: !Sub |
        kind: Secret
        apiVersion: v1
        type: opaque
        metadata:
          name: 3decision-jwt-secret
          namespace: ${TNamespace}
        data:
          id_rsa: ${JWTPrivateKey}
          id_rsa.pub: ${JWTPublicKey}
  NestAuthSecret:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: TDecisionNamespace
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: !Ref TNamespace
      Manifest: !Sub |
        kind: Secret
        apiVersion: v1
        type: opaque
        metadata:
          name: nest-authentication-secrets
          namespace: ${TNamespace}
        stringData:
          AZURE_TENANT: "${AzureTenant}"
          AZURE_SECRET: "${AzureSecret}"
          OKTA_DOMAIN: "${OktaDomain}"
          OKTA_SERVER_ID: "${OktaServerId}"
          OKTA_SECRET: "${OktaSecret}"
  DatabaseSecrets:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: [ TDecisionNamespace, ChoralNamespace, ExternalSecretsOperator ]
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: external-secrets
      Manifest: !Sub |
        ---
        apiVersion: external-secrets.io/v1beta1
        kind: ClusterSecretStore
        metadata:
          name: aws-secret-store
        spec:
          provider:
            aws:
              service: SecretsManager
              region: ${AWS::Region}
              role: ${SecretRoleArn}
        ---
        apiVersion: external-secrets.io/v1beta1
        kind: ClusterExternalSecret
        metadata:
          name: database-secrets
        spec:
          externalSecretName: database-secrets
          namespaceSelector:
            matchExpressions:
              - {key: kubernetes.io/metadata.name, operator: In, values: [${TNamespace}, choral]}
          refreshTime: 1m
          externalSecretSpec:
            refreshInterval: 1m
            secretStoreRef:
              name: aws-secret-store
              kind: ClusterSecretStore
            target:
              name: database-secrets
              creationPolicy: Owner
            data:
            - secretKey: SYS_DB_PASSWD
              remoteRef:
                key: 3dec-admin-db
                property: password
            - secretKey: DB_PASSWD
              remoteRef:
                key: 3dec-user-db
                property: password
            - secretKey: ORACLE_PASSWORD
              remoteRef:
                key: 3dec-user-db
                property: password
            - secretKey: CHEMBL_DB_PASSWD
              remoteRef:
                key: 3dec-chembl-db
                property: password
            - secretKey: CHORAL_DB_PASSWD
              remoteRef:
                key: 3dec-choral-db
                property: password

  SentinelBackupConfigmapTdecision:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: TDecisionNamespace
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: !Ref TNamespace
      Manifest: !Sub |
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: sentinel-backup-env-cm
        data:
          BUCKET_NAME: ${RedisAccessPointAlias}
          PROVIDER: aws

  SentinelBackupConfigmapSentinel:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: RedisClusterNamespace
    Properties:
      ClusterName: !Ref EKSClusterName
      Namespace: redis-cluster
      Manifest: !Sub |
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: sentinel-backup-env-cm
        data:
          BUCKET_NAME: ${RedisAccessPointAlias}
          PROVIDER: aws
          
  TdecisionChart:
    Type: "AWSQS::Kubernetes::Helm"
    DependsOn: [ JWTSecret, EncryptedStorageClass, NestAuthSecret, DatabaseSecrets, CertManager ]
    Metadata: { cfn-lint: { config: { ignore_checks: [ E3012 ] } } }
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      ClusterID: !Ref EKSClusterName
      Name: tdecision
      Namespace: !Ref TNamespace
      Chart: oci://fra.ocir.io/discngine1/3decision_kube/3decision-helm:2.2.0
      Values:
        nodeCloud.volumes.jwtSecret.name: 3decision-jwt-secret
        oracle.connectionString: !Ref DBConnectionString
        oracle.hostString: !Ref HostString
        oracle.pdbString: !Ref DBName
        volumes.storageClassName: gp2-encrypted
        wikijs.pvc.storageClassName: gp2-encrypted
        volumes.claimPods.backend.publicdata.awsElasticBlockStore.fsType: ext4
        volumes.claimPods.backend.publicdata.awsElasticBlockStore.volumeID: !Ref DataPubVolumeID
        volumes.claimPods.backend.publicdata.awsElasticBlockStore.availabilityZone: !Select [ 0, Fn::GetAZs: !Ref 'AWS::Region' ]
        ingress.host: !Ref DomainName
        ingress.certificateArn: !Ref CertificateArn
        ingress.visibility: !Ref LoadBalancerType
        ingress.ui.host: !Ref MainSubdomain
        ingress.api.host: !Ref ApiSubdomain
        ingress.wikijs.host: !Ref HelpSubdomain
        ingress.class: !Ref LoadBalancerClass
        nest.env.azure_client_id.name: "AZURE_CLIENT_ID"
        nest.env.azure_client_id.value: !If [ AzureUnused, "none", !Ref AzureClientId ]
        nest.env.azure_redirect_uri.name: "AZURE_REDIRECT_URI"
        nest.env.azure_redirect_uri.value: !Ref AzureRedirectUri
        nest.env.okta_client_id.name: "OKTA_CLIENT_ID"
        nest.env.okta_client_id.value: !If [ OktaUnused, "none", !Ref OktaClientId ]
        nest.env.okta_redirect_uri.name: "OKTA_REDIRECT_URI"
        nest.env.okta_redirect_uri.value: !Ref OktaRedirectUri
        nfs.public.serviceIP: !If [ ServiceCidrSecondary, "10.100.10.10", "172.20.10.10" ]
        nfs.private.serviceIP: !If [ ServiceCidrSecondary, "10.100.10.11", "172.20.10.11" ]
        rbac.cluster.redisBackup.annotations: !Sub "eks.amazonaws.com/role-arn: ${RedisRoleArn}"

  ChoralChart:
    Type: "AWSQS::Kubernetes::Helm"
    DependsOn: DatabaseSecrets
    Metadata: { cfn-lint: { config: { ignore_checks: [ E3012 ] } } }
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      ClusterID: !Ref EKSClusterName
      Name: choral
      Namespace: choral
      Chart: oci://fra.ocir.io/discngine1/3decision_kube/choral-helm:1.1.6
      Values:
        oracle.connectionString: !Ref DBConnectionString
        pvc.storageClassName: gp2-encrypted