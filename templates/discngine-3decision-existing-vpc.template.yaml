---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This creates an EKS cluster, and sets up Discngine 3decision infrastructure. (qs-1snm79fed)."
Metadata:
  QuickStartDocumentation:
    EntrypointName: "Launch into an existing VPC"
  LintSpellExclude:
    - Discngine
    - 3decision
    - namespace
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network configuration"
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - KeyPairName
      - Label:
          default: Amazon EKS configuration
        Parameters:
          - KubernetesVersion
          - NodeVolumeSize
          - NodeInstanceType
          - NumberOfNodes
          - AdditionalEKSAdminUserArn
          - AdditionalEKSAdminRoleArn
          - CustomAmiId
      - Label:
          default: Discngine 3decision network configuration
        Parameters:
          - DomainName
          - MainSubdomain
          - ApiSubdomain
          - HelpSubdomain
          - HostedZoneId
          - CertificateArn
          - LoadBalancerType
          - LoadBalancerClass
      - Label:
          default : Discngine 3decision database configuration
        Parameters:
          - DBSnapshotIdentifier
          - DBInstanceIdentifier
          - DBName
          - DBInstanceClass
          - DBMultiZone
      - Label:
          default: Discngine 3decision kube configuration
        Parameters:
          - TNamespace
          - JWTSecretName
      - Label:
          default: Discngine 3decision authentication configuration
        Parameters:
          - AzureClientId
          - AzureTenant
          - AzureSecret
          - AzureRedirectUri
          - OktaClientId
          - OktaSecret
          - OktaDomain
          - OktaServerId
          - OktaRedirectUri
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix
          - PerAccountSharedResources
          - PerRegionSharedResources
    ParameterLabels:
      KeyPairName:
        default: SSH key name
      PrivateSubnet1ID:
        default: Private subnet 1 ID
      PrivateSubnet2ID:
        default: Private subnet 2 ID
      PrivateSubnet3ID:
        default: Private subnet 3 ID
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      VPCID:
        default: VPC ID
      PerAccountSharedResources:
        default: Per account shared resources
      PerRegionSharedResources:
        default: Per region shared resources
      NodeInstanceType:
        default: Node instance type
      NumberOfNodes:
        default: Number of nodes
      AdditionalEKSAdminUserArn:
        default: Additional EKS admin ARN (IAM user)
      AdditionalEKSAdminRoleArn:
        default: Additional EKS admin ARN (IAM role)
      KubernetesVersion:
        default: Kubernetes version
      CustomAmiId:
        default: Custom AMI Id
      NodeVolumeSize:
        default: Size of worker nodes volumes
      DBSnapshotIdentifier:
        default: Identifier of the database snapshot
      DBInstanceIdentifier:
        default: Identifier of the database
      DBName:
        default: Name of the database
      DBInstanceClass:
        default: Instance type of the database
      DBMultiZone:
        default: Whether the DB is highly available
      TNamespace:
        default: 3decision Helm chart namespace
      JWTSecretName:
        default: Secret Name
      HostedZoneId:
        default: Route 53 hosted zone Id
      DomainName:
        default: Domain name used for load balancing
      MainSubdomain:
        default: Subdomain name for app landing page
      ApiSubdomain:
        default: Subdomain of the api
      HelpSubdomain:
        default: Subdomain of the help page
      CertificateArn:
        default: Arn of a certificate
      LoadBalancerType:
        default: Type of loadbalancer created
      LoadBalancerClass:
        default: Loadbalancer class
      AzureClientId:
        default: Azure app client id
      AzureSecret:
        default: Azure app secret
      AzureTenant:
        default: Azure tenant
      AzureRedirectUri:
        default: Azure app redirect uri
      OktaClientId:
        default: Okta app client id
      OktaSecret:
        default: Okta app secret
      OktaDomain:
        default: Okta domain
      OktaServerId:
        default: Okta server id
      OktaRedirectUri:
        default: Okta app redirect uri
Parameters:
  KeyPairName:
    Description: A public/private key pair, which allows you to connect securely to your instance after it launches.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing Keyname
  NodeInstanceType:
    Type: String
    Default: t3.xlarge
    Description: EKS node instance type.
                 We recommend using t3.xlarge as this is the minimal required node shape, but scaling is not noticeable by scaling this up.
    AllowedValues:
      - t3.xlarge
      - t3.2xlarge
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.12xlarge
      - r5d.24xlarge
      - z1d.large
      - z1d.xlarge
      - z1d.2xlarge
      - z1d.3xlarge
      - z1d.6xlarge
      - z1d.12xlarge
  VPCID:
    Description: "Required: The ID of the VPC."
    Type: String
  PrivateSubnet1ID:
    Description: "Required: The ID of the private subnet located in Availability Zone 1."
    Type: String
  PrivateSubnet2ID:
    Description: "Required: The ID of the private subnet located in Availability Zone 2."
    Type: String
  PrivateSubnet3ID:
    Description: "Optional: The ID of the private subnet 3 located in Availability Zone 3."
    Type: String
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3BucketRegion:
    Default: 'eu-central-1'
    Description: "The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value."
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-discngine-3decision/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  KubernetesVersion:
  # https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html#kubernetes-release-calendar
    Type: String
    Description: Kubernetes control plane version.
    AllowedValues: ['1.23', '1.24', '1.25', '1.26', '1.27']
    Default: '1.26'
  NodeVolumeSize:
    Type: String
    Default: 100
    Description: "Required: Size of EBS volumes attached to worker nodes.
                  Increase this size if your pods are getting evicted with a disk pressure annotation."
  CustomAmiId:
    Type: String
    Default: ""
    Description: "Optional: If an AMI ID is specified, it is used instead of the default EKS images for cluster nodes."
  PerAccountSharedResources:
    Type: String
    AllowedValues: ['Yes', 'No']
    Default: 'Yes'
    Description: You can set "Yes" or "No" according to whether another EKS quickstart has been deployed in your account.
  PerRegionSharedResources:
    Type: String
    AllowedValues: ['Yes', 'No']
    Default: 'Yes'
    Description: You can set "Yes" or "No" according to whether another EKS quickstart has been deployed in your region.
  NumberOfNodes:
    Default: 3
    Description: The number of Amazon EKS node instances. The default is one for each of the three Availability Zones.
    Type: Number
  DBSnapshotIdentifier:
    Default: ""
    Description: "Optional: the snapshot arn used for the database.
                  If left empty, the default snapshot will be used. 
                  But if you wish to have an encrypted database, you will have to copy the public snapshot locally and select encryption and use that arn"
    Type: String
  DBInstanceIdentifier:
    Default: db3dec
    Description: "Required: The database instance name.
                  This defaults to db3dec."
    Type: String
    MinLength: '1'
    MaxLength: '8'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBName:
    Default: ORCL
    Description: "Required: The name given to the RDS Oracle database.
                  This defaults to ORCL."
    Type: String
    MinLength: '1'
    MaxLength: '8'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBInstanceClass:
    AllowedValues:
      - db.t3.medium
      - db.t3.large
      - db.t3.xlarge
      - db.t3.2xlarge
      - db.m5.large
      - db.m5.xlarge
      - db.m5.2xlarge
      - db.m5.4xlarge
    Default: db.t3.xlarge
    Description: Amazon RDS instance type for the Oracle Database instance.
                 We recommend t3.xlarge for production use as a lower shape will be rather slow.
    Type: String
  DBMultiZone:
    Description: High Availability (Multi-AZ) for Oracle RDS.
        More information is available here - https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.MultiAZ.html.
    Type: String
    AllowedValues: [ 'true', 'false' ]
    Default: 'false'
  TNamespace:
    Default: tdecision
    Description: "Required: The name of the kubernetes namespace in which the 3decision helm chart will be deployed.
                  This will default to tdecision if not given.
                  The namespace will be created if it doesn't already exists."
    Type: String
  JWTSecretName:
    Default: "3dec-JWT-ssh"
    Description: "Name of the secret created in secrets manager that will contain an ssh key fed to the application."
    Type: String
  AdditionalEKSAdminUserArn:
    Default: ""
    Description: "Optional: IAM user Amazon Resource Name (ARN) to be granted administrative access to the EKS cluster."
    Type: String
  AdditionalEKSAdminRoleArn:
    Default: ""
    Description: "Optional: IAM role Amazon Resource Name (ARN) to be granted administrative access to the EKS cluster."
    Type: String
  HostedZoneId:
    Default: ""
    Description: "Optional: Creates dns records for the given route 53 hosted zone if given."
    Type: String
  DomainName:
    Description: "Required: Root domain name used for load balancer rules
                  This is only the root domain name not the fqdn, eg: example.com"
    Type: String
  MainSubdomain:
    Default: "3decision"
    Description: "Required: Name used for the main app subdomain"
    Type: String
  ApiSubdomain:
    Default: "3decision-api"
    Description: "Required: Name used for the api subdomain"
    Type: String
  HelpSubdomain:
    Default: "3decision-help"
    Description: "Required: Name used for the help subdomain"
    Type: String
  CertificateArn:
    Default: ""
    Description: "Optional: Arn of a certificate of the associated domain you want added to the load balancer"
    Type: String
  LoadBalancerType:
    AllowedValues:
      - internet-facing
      - internal
    Default: "internal"
    Description: "Type of loadbalancer created.
                  This can either be equal to internet-facing for public loadbalancer or internal for private loadbalancers"
    Type: String
  LoadBalancerClass:
    AllowedValues:
      - alb
      - nginx
    Default: "alb"
    Description: "Type of loadbalancer created.
                  This will create an application loadBalancer by default and should generally not be changed.
                  By selecting nginx you will have a classic load balancer with a self signed certificate."
    Type: String
  AzureClientId:
    Type: String
    Default: ""
    Description: "Optional: Will enable azure authentication if set.
                  Client id of azure app"
  AzureTenant:
    Type: String
    Default: ""
    Description: "Conditional: Should be given if azure client id variable is set.
                  Tenant id of the azure app"
  AzureSecret:
    Type: String
    Default: ""
    Description: "Conditional: Should be given if azure client id variable is set.
                  Secret of the azure app"
  AzureRedirectUri:
    Type: String
    Default: ""
    Description: "Conditional: Should be given if azure client id variable is set.
                  This is the redirect_uri set in the azure app, by default should be https://<ApiSubdomain>.<DomainName>/auth/azure/callback"
  OktaClientId:
    Type: String
    Default: ""
    Description: "Optional: Will enable okta authentication if set.
                  Client ID of the okta app"
  OktaSecret:
    Type: String
    Default: ""
    Description: "Conditional: Should be given if okta client id variable is set.
                  Secret of the okta app"
  OktaDomain:
    Type: String
    Default: ""
    Description: "Conditional: Should be given if okta client id variable is set.
                  Domain of the okta environment"
  OktaServerId:
    Type: String
    Default: ""
    Description: "Conditional: Should be given if okta client id variable is set.
                  Server Id of the okta environment"
  OktaRedirectUri:
    Type: String
    Default: ""
    Description: "Conditional: Should be given if okta client id variable is set.
                  This is the redirect_uri set in the okta app, by default should be https://<ApiSubdomain>.<DomainName>/auth/okta/callback"

Rules:
  DiscngineSupportedRegionRule:
    Assertions:
      - Assert:
          Fn::Contains:
            - - us-east-1
              - eu-central-1
            - !Ref AWS::Region
        AssertDescription: The Quick Start is supported only in us-east-1 and eu-central-1 AWS Regions. Please contact Discngine to request support for other Regions.

Mappings:
  PartitionMap:
    aws:
      EC2ServicePrincipal: "ec2.amazonaws.com"
    aws-us-gov:
      EC2ServicePrincipal: "ec2.amazonaws.com"
    aws-cn:
      EC2ServicePrincipal: "ec2.amazonaws.com.cn"
    aws-iso:
      EC2ServicePrincipal: "ec2.c2s.ic.gov"
    aws-iso-b:
      EC2ServicePrincipal: "ec2.sc2s.sgov.gov"

Conditions:
  CreatePerAccountSharedResources: !Equals [!Ref PerAccountSharedResources, 'Yes']
  CreatePerRegionSharedResources: !Equals [!Ref PerRegionSharedResources, 'Yes']
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, aws-quickstart]
  AddUser: !Not [!Equals [!Ref AdditionalEKSAdminUserArn, '']]
  AddRole: !Not [!Equals [!Ref AdditionalEKSAdminRoleArn, '']]

Resources:
  AccountSharedResources:
    Type: AWS::CloudFormation::Stack
    Condition: CreatePerAccountSharedResources
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Metadata: { cfn-lint: { config: { ignore_checks: [W3011] } } }
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/eks/amazon-eks-per-account-resources.template.yaml
        - S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Tags: [{ Key: eks-quickstart, Value: AccountSharedResources }]
  RegionalSharedResources:
    Type: AWS::CloudFormation::Stack
    Condition: CreatePerRegionSharedResources
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Metadata:
      cfn-lint: { config: { ignore_checks: [W3011] } }
      DependsOn: !If [CreatePerAccountSharedResources, !Ref AccountSharedResources, !Ref AWS::NoValue]
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/eks/amazon-eks-per-region-resources.template.yaml
        - S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
      Tags: [{ Key: eks-quickstart, Value: RegionalSharedResources }]

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy"

  EKSNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !FindInMap [PartitionMap, !Ref "AWS::Partition", EC2ServicePrincipal]
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Path: /

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication
      VpcId: !Ref VPCID
  ControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow SG members to access k8s api
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  EKSKey:
    Type: "AWS::KMS::Key"
    Metadata:
      cfn-lint:
        config:
          ignore_checks: [EIAMPolicyActionWildcard, EKMSKeyEnableKeyRotation]
          ignore_reasons:
            EIAMPolicyWildcardResource: "this is the default kms policy as per https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default"
    Properties:
      KeyPolicy:
        Version: "2012-10-17"
        Id: "key-default-1"
        Statement:
          - Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"

  KubernetesAdminRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn-lint:
        config:
          ignore_checks: [EIAMPolicyWildcardResource]
          ignore_reasons:
            EIAMPolicyWildcardResource: >-
              Action eks:DescribeAddonConfiguration requires a wildcard
              resource. As of 2023-02-05, cfn-lint falsely reports this as an
              issue.
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: eksStackPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - eks:CreateCluster
                  - eks:DescribeAddonConfiguration
                  - eks:DescribeAddonVersions
                  - eks:ListClusters
                Resource: '*'
              - Effect: Allow
                Action:
                  - eks:AccessKubernetesApi
                  - eks:AssociateEncryptionConfig
                  - eks:AssociateIdentityProviderConfig
                  - eks:CreateAddon
                  - eks:CreateFargateProfile
                  - eks:CreateNodegroup
                  - eks:DeleteAddon
                  - eks:DeleteCluster
                  - eks:DeleteNodegroup
                  - eks:DeleteFargateProfile
                  - eks:DescribeAddon
                  - eks:DescribeCluster
                  - eks:DescribeFargateProfile
                  - eks:DescribeIdentityProviderConfig
                  - eks:DescribeNodegroup
                  - eks:DescribeUpdate
                  - eks:DisassociateIdentityProviderConfig
                  - eks:ListAddons
                  - eks:ListFargateProfiles
                  - eks:ListIdentityProviderConfigs
                  - eks:ListNodegroups
                  - eks:ListTagsForResource
                  - eks:ListUpdates
                  - eks:TagResource
                  - eks:UntagResource
                  - eks:UpdateAddon
                  - eks:UpdateClusterConfig
                  - eks:UpdateClusterVersion
                  - eks:UpdateNodegroupConfig
                  - eks:UpdateNodegroupVersion
                Resource:
                  - !Sub arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:addon/*/*/*
                  - !Sub arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:cluster/*
                  - !Sub arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:fargateprofile/*/*/*
                  - !Sub arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:identityproviderconfig/*/*/*/*
                  - !Sub arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:nodegroup/*/*/*
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource:
                  - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:*/*
              - Effect: Allow
                Action:
                  - events:DeleteRule
                  - events:PutRule
                  - events:PutTargets
                  - events:RemoveTargets
                Resource:
                  - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/*
                  - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/*/*
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:InvokeFunction
                  - lambda:RemovePermission
                Resource: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub arn:${AWS::Partition}:s3:::*/*

  CallerArn:
    Type: Custom::GetCallerArn
    Properties:
      ServiceToken: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:eks-quickstart-GetCallerArn

  EKS:
    Type: AWSQS::EKS::Cluster
    Properties:
      ResourcesVpcConfig:
        SecurityGroupIds: [!Ref ControlPlaneSecurityGroup]
        SubnetIds: [!Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID]
        PublicAccessCidrs: ["0.0.0.0/0"]
        EndpointPrivateAccess: true
        EndpointPublicAccess: true
      EnabledClusterLoggingTypes: !Ref AWS::NoValue
      EncryptionConfig:
        - Resources: [secrets]
          Provider:
            KeyArn: !GetAtt EKSKey.Arn
      RoleArn: !GetAtt EKSClusterRole.Arn
      Version: !Ref KubernetesVersion
      KubernetesApiAccess:
        Roles:
          - Arn: !GetAtt EKSNodeRole.Arn
            Username: system:node:{{EC2PrivateDNSName}}
            Groups: [system:bootstrappers, system:nodes]
          - Arn: !GetAtt KubernetesAdminRole.Arn
            Username: !GetAtt KubernetesAdminRole.Arn
            Groups: [system:masters]
          - Arn: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/awsqs-kubernetes-helm
            Username: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/awsqs-kubernetes-helm
            Groups: [system:masters]
          - Arn: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/awsqs-kubernetes-get
            Username: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/awsqs-kubernetes-get
            Groups: [system:masters]
          - Arn: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/awsqs-kubernetes-resource
            Username: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/awsqs-kubernetes-resource
            Groups: [system:masters]
          # We don't know whether GetCallerArn returned a user arn or a role arn, so we just add it to both
          - Arn: !GetAtt CallerArn.Arn
            Username: !GetAtt CallerArn.Arn
            Groups: [system:masters]
          - !If
            - AddRole
            - Arn: !Ref AdditionalEKSAdminRoleArn
              Username: !Ref AdditionalEKSAdminRoleArn
              Groups: [system:masters]
            - !Ref AWS::NoValue
        Users:
          # We don't know whether GetCallerArn returned a user arn or a role arn, so we just add it to both
          - Arn: !GetAtt CallerArn.Arn
            Username: !GetAtt CallerArn.Arn
            Groups: [system:masters]
          - !If
            - AddUser
            - Arn: !Ref AdditionalEKSAdminUserArn
              Username: !Ref AdditionalEKSAdminUserArn
              Groups: [system:masters]
            - !Ref AWS::NoValue

  ClusterOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      ClientIdList:
        - sts.amazonaws.com
        - !Sub sts.${AWS::Region}.amazonaws.com
      ThumbprintList:
        - 9e99a48a9960b14926bb7f3b02e22da2b0ab7280
      Url: !GetAtt EKS.OIDCIssuerURL

  IdentityProviderConfig:
    Type: AWS::EKS::IdentityProviderConfig
    Properties:
      ClusterName: !Ref EKS
      Type: oidc
      Oidc:
        ClientId: "kubernetes"
        IssuerUrl: !GetAtt EKS.OIDCIssuerURL

  NodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      Tags:
        - Key: !Sub kubernetes.io/cluster/${EKS}
          Value: owned
      VpcId: !Ref VPCID

  NodeSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 65535

  ClusterControlPlaneSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      FromPort: 443
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 1025
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 443
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 443

  NodeSecurityGroupFromControlPlaneIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      FromPort: 1025
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      FromPort: 443
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      ToPort: 443

  EKSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: !Ref NodeVolumeSize
              VolumeType: gp2
              DeleteOnTermination: true
        DisableApiTermination: true
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: false
            Groups:
              - !Ref NodeSecurityGroup
        ImageId: !Sub '{{resolve:ssm:/aws/service/eks/optimized-ami/${KubernetesVersion}/amazon-linux-2/recommended/image_id}}' #!Ref CustomAmiId
        InstanceType: !Ref NodeInstanceType
        KeyName: !Ref KeyPairName
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -o xtrace
            /etc/eks/bootstrap.sh ${EKS} \
                              --b64-cluster-ca ${EKS.CertificateAuthorityData} \
                              --apiserver-endpoint ${EKS.Endpoint} \
                              --use-max-pods false \
                              --kubelet-extra-args '--max-pods=110'
            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack ${AWS::StackName} \
                     --resource NodeGroup \
                     --region ${AWS::Region}
        MetadataOptions:
          HttpPutResponseHopLimit : 2
          HttpEndpoint: enabled
          HttpTokens: required

  AmazonEksEbsCsiDriverRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn-lint: { config: { ignore_checks: [EIAMPolicyWildcardResource] } }
    Properties:
      AssumeRolePolicyDocument: !Sub 
      - |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": "${ClusterOIDCProvider}"
              },
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "${OIDCIssuerURLWithoutProtocol}:aud": "sts.amazonaws.com",
                  "${OIDCIssuerURLWithoutProtocol}:sub": "system:serviceaccount:kube-system:ebs-csi-controller-sa"
                }
              }
            }
          ]
        }
      - OIDCIssuerURLWithoutProtocol: !Join ['', !Split ['https://', !Ref EKS.OIDCIssuerURL]]
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
      Policies:
        - PolicyName: AmazonEbsCsiDeviceEncryption
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:ListGrants
                  - kms:RevokeGrant
                Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*
                Condition: { Bool: { kms:GrantIsForAWSResource: true } }
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey
                  - kms:GenerateDataKeyWithoutPlaintext
                  - kms:GenerateDataKeyPair
                  - kms:GenerateDataKeyPairWithoutPlaintext
                  - kms:ReEncryptFrom
                  - kms:ReEncryptTo
                Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*

  CSIDriver:
    Type: AWS::EKS::Addon
    Properties: 
      AddonName: aws-ebs-csi-driver
      ClusterName: !Ref EKS
      ResolveConflicts: NONE
      ServiceAccountRoleArn: !GetAtt AmazonEksEbsCsiDriverRole.Arn

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      NodegroupName: Default
      ClusterName: !Ref EKS
      NodeRole: !GetAtt EKSNodeRole.Arn
      ScalingConfig:
        MinSize: !Ref NumberOfNodes
        DesiredSize: !Ref NumberOfNodes
        MaxSize: !Ref NumberOfNodes
      Subnets:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
        - !Ref PrivateSubnet3ID
      LaunchTemplate: 
        Id: !Ref EKSLaunchTemplate
        Version: !GetAtt EKSLaunchTemplate.LatestVersionNumber

  3decisionStack:
    Type: AWS::CloudFormation::Stack
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      TemplateURL: !Sub
        - "https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/discngine-3decision.template.yaml"
        - S3Region:
            !If [UsingDefaultBucket, !Ref "AWS::Region", !Ref QSS3BucketRegion]
          S3Bucket:
            !If [
              UsingDefaultBucket,
              !Sub "${QSS3BucketName}-${AWS::Region}",
              !Ref QSS3BucketName,
            ]
      Parameters:
        QSS3BucketName: !Ref QSS3BucketName
        QSS3BucketRegion: !Ref QSS3BucketRegion
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        VPCID: !Ref VPCID
        EKSClusterName: !Ref EKS
        DBInstanceIdentifier: !Ref DBInstanceIdentifier
        DBName: !Ref DBName
        DBInstanceClass: !Ref DBInstanceClass
        DBMultiZone: !Ref DBMultiZone
        DBSubnets:
          !Join [
            ",",
            [
              !Ref PrivateSubnet1ID,
              !Ref PrivateSubnet2ID,
              !Ref PrivateSubnet3ID,
            ],
          ]
        TNamespace: !Ref TNamespace
        JWTSecretName: !Ref JWTSecretName
        HostedZoneId: !Ref HostedZoneId
        DomainName: !Ref DomainName
        CertificateArn: !Ref CertificateArn
        LoadBalancerType: !Ref LoadBalancerType
        LoadBalancerClass: !Ref LoadBalancerClass
        DBSnapshotIdentifier: !Ref DBSnapshotIdentifier
        AzureClientId: !Ref AzureClientId
        AzureTenant: !Ref AzureTenant
        AzureSecret: !Ref AzureSecret
        AzureRedirectUri: !Ref AzureRedirectUri
        OktaClientId: !Ref OktaClientId
        OktaSecret: !Ref OktaSecret
        OktaDomain: !Ref OktaDomain
        OktaServerId: !Ref OktaServerId
        OktaRedirectUri: !Ref OktaRedirectUri
        MainSubdomain: !Ref MainSubdomain
        ApiSubdomain: !Ref ApiSubdomain
        HelpSubdomain: !Ref HelpSubdomain
        NodeGroupRoleArn: !GetAtt EKSNodeRole.Arn
        NodeSecurityGroup: !Ref NodeSecurityGroup
        OIDCIssuerURL: !GetAtt EKS.OIDCIssuerURL